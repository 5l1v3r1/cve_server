#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.join('..', '..', '/lib'), __FILE__)
require 'nokogiri'
require 'net/http'
require 'optparse'
require 'cve_server'

def fetch_page(url)
  uri = URI.parse(url)
  use_ssl = uri.scheme == 'https'
  Net::HTTP.start(uri.host, uri.port, use_ssl: use_ssl) do |http|
    response = http.request_get(uri)
    case response
    when Net::HTTPSuccess then
      response
    when Net::HTTPRedirection then
      location = response['location']
      fail "redirected to #{location}"
    else
      response.value
    end
  end
end

def download_file(url, dest_path)
  uri = URI.parse(url)
  use_ssl = uri.scheme == 'https'
  Net::HTTP.start(uri.host, uri.port, use_ssl: use_ssl) do |http|
    http.request_get(uri.path) do |response|
      case response
      when Net::HTTPSuccess then
        f = File.open(dest_path, 'w')
        response.read_body do |seg|
          f << seg
          sleep 0.005
        end
        f.close
      when Net::HTTPRedirection then
        location = response['location']
        fail "redirected to #{location}"
      else
        fail "Unable to download #{url}"
      end
    end
  end
end

def dest_path(link)
  filename = link.split('/').last
  File.join(CVEServer::Boot.config.raw_data_path, filename)
end

def download_reports(file_ext)
  abort "#{file_ext} format not supported" unless file_ext.match(/^(json|xml)$/)
  # CveServer just  support for NVD reports XML version 2.0 and JSON version 1.0
  version = (file_ext == 'json') ? '1.0' : '2.0'
  link_pattern = /nvdcve-#{version}-(modified|recent|\d{4}).#{file_ext}.gz$/

  data_url = 'https://nvd.nist.gov/vuln/data-feeds'
  response = fetch_page(data_url)

  if response.is_a?(Net::HTTPSuccess)
    @doc = Nokogiri::HTML(response.body)
    xml_file_path = '//table[@data-testid="vuln-feed-table"]/tbody' \
                    '/tr[@class="xml-feed-data-row"]' \
                    '/td[@class="xml-file-type file-20"]/a[text()]/@href'
    @doc.xpath('//html').xpath(xml_file_path).each do |href|
      link = href.value
      next unless link =~ link_pattern

      dest_path = dest_path(link)
      downloaded_path = [dest_path, '.download'].join

      puts "Downloading file from #{link}.."
      download_file(link, downloaded_path)

      if File.exist?(downloaded_path) && File.size?(downloaded_path)
        File.delete(dest_path) if File.exist?(dest_path)
        File.rename(downloaded_path, dest_path)
      end
    end
  end
end

usage = 'Usage: nvd_downloader [options]'
options = { file_ext: 'xml' }
OptionParser.new do |opts|
  opts.banner = usage

  # Mandatory argument.
  opts.on("-f", "--file_extension json or xml", "Specify the file extension (json or xml) to be downloaded from NVD") do |file_ext|
    options[:file_ext] = file_ext || 'json'
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

download_reports(options[:file_ext])
